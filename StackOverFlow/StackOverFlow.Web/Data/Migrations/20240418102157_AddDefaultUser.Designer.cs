// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackOverFlow.Infrastructure;

#nullable disable

namespace StackOverFlow.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240418102157_AddDefaultUser")]
    partial class AddDefaultUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuestionsTags", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnswerTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnsweredByCreatorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AnsweredByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.AnswerVotes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Down")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Up")
                        .HasColumnType("bit");

                    b.Property<Guid>("VotedBYId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerVotes");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerCount")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriedApproach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.QuestionVotes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Down")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Up")
                        .HasColumnType("bit");

                    b.Property<Guid>("VotedBYId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionVotes");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RepliedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyByEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de8d8d12-81b2-4a68-8c6b-c3fe3f962381"),
                            Description = "JavaScript is a server-side language.",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("41087fed-1f73-4356-b5b5-d9d6c8fd5568"),
                            Description = "C# is a programming language developed by Microsoft.",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("8dfb80b1-aa4c-4348-8030-e64e3b5430eb"),
                            Description = "Python is a high-level, interpreted programming language.",
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("dbec39cf-4e2f-4eb1-8a29-eb3548f52380"),
                            Description = "Java is a widely used programming language.",
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("77ab7a75-d267-49a5-9e93-68276f5d7a00"),
                            Description = "HTML is the standard markup language for creating web pages.",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = new Guid("4573446c-9f81-4d39-83fc-fdab5cc8edcc"),
                            Description = "CSS is used for styling web pages.",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = new Guid("2cf29ee8-0872-4577-b179-0182a091e57d"),
                            Description = "SQL is used for managing relational databases.",
                            Name = "SQL"
                        },
                        new
                        {
                            Id = new Guid("7eacd56e-c041-422e-97ff-5231e560e4f6"),
                            Description = "React is a JavaScript library for building user interfaces.",
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("da3c4594-4fa9-4302-95cb-5b7eb6311ca5"),
                            Description = "Angular is a platform and framework for building single-page client applications using HTML and TypeScript.",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("85ce63b1-806e-4358-9fc1-1ac6c8da33e7"),
                            Description = "Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a browser.",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = new Guid("9626ea10-d182-4621-b244-5fd1924d8041"),
                            Description = "Ruby is a dynamic, reflective, object-oriented, general-purpose programming language.",
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("b0481e6f-b1c9-4161-bb7c-54df75aa7b73"),
                            Description = "PHP is a general-purpose scripting language especially suited to web development.",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("091c2a00-fa66-4e62-811e-33c3876b5b3d"),
                            Description = "Swift is a powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS.",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("43cddd7d-863e-4d85-8975-425dcbaf4c95"),
                            Description = "Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.",
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("3a322f36-d94f-4ac6-9d70-e42c77d3bd09"),
                            Description = "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("28618c43-4fc2-4f8f-bc4e-a602ba9f0b85"),
                            Description = "Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = new Guid("f4ba6403-8b01-4f3f-8325-d6a3bc60f507"),
                            Description = "Kotlin is a statically typed programming language that runs on the Java Virtual Machine and can be compiled to JavaScript source code or use the LLVM compiler infrastructure.",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("430cb9df-9a29-4014-b8ef-744ada52cf31"),
                            Description = "Scala is a general-purpose programming language providing support for functional programming and a strong static type system.",
                            Name = "Scala"
                        },
                        new
                        {
                            Id = new Guid("2ee159fc-30dc-45b0-9561-9143e0194876"),
                            Description = "Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License.",
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = new Guid("c0cd0ac9-cfe4-4d84-894f-6f11a91d67bb"),
                            Description = "Objective-C is a general-purpose, object-oriented programming language that adds Smalltalk-style messaging to the C programming language.",
                            Name = "Objective-C"
                        },
                        new
                        {
                            Id = new Guid("142e6a02-d369-44f9-8c41-b081fe22972e"),
                            Description = "Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications.",
                            Name = "Vue.js"
                        },
                        new
                        {
                            Id = new Guid("3763cb9e-b919-4a6e-823a-824f9c30a358"),
                            Description = "ASP.NET is an open-source web framework for building modern web apps and services with .NET.",
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("9df73d24-2961-40fe-9bbb-ae71e1b7dc04"),
                            Description = "Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design.",
                            Name = "Django"
                        });
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e2eadd0-1132-44b0-ad9e-d005f777374e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2c329f7-f548-4797-b8c9-428ccc98d182",
                            DisplayName = "User1",
                            Email = "user1@AllClaim.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "London",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@ALLCLAIM.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAECj4uFAaFDQHaIGCcc+f/DoNDaya3ZvYYPSgEtmCYI0jw7RWTBF1esIse/wtFo95yw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            Reputation = 0,
                            SecurityStamp = "ca0ce49a-7414-4c9f-b10c-66c936487c2b",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("4e91c117-5b83-4faa-96cf-22874e306e42"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35b3c677-9b04-4df5-ad6a-a90098830a62",
                            DisplayName = "User2",
                            Email = "user2@NoClaim.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            Location = "Manchester",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@NOCLAIM.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfHIKHJ79TdXns/xUlhbnPmgI7HhtHKyhgWmE9JpD2o1pXUGl7FVqvdJ/cmesfwdg==",
                            PhoneNumber = "9876543210",
                            PhoneNumberConfirmed = true,
                            Reputation = 0,
                            SecurityStamp = "2711f32b-461d-4d51-a330-35e0daa39fa5",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.AnswerVotes", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Answer", "Answer")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.QuestionVotes", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany("Votes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Reply", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Answer", "Answer")
                        .WithMany("Replies")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.Navigation("AnswerVotes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
