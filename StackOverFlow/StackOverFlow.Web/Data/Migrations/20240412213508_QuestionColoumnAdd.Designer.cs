// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackOverFlow.Infrastructure;

#nullable disable

namespace StackOverFlow.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240412213508_QuestionColoumnAdd")]
    partial class QuestionColoumnAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuestionsTags", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnswerTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnsweredByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerCount")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriedApproach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RepliedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReplyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de8d8d12-81b2-4a68-8c6b-c3fe3f962381"),
                            Description = "JavaScript is a server-side language.",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("ee8d949c-71cc-424e-9122-76a7984005e7"),
                            Description = "C# is a programming language developed by Microsoft.",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("244183c1-77f7-45fc-864a-d2fefa87ca22"),
                            Description = "Python is a high-level, interpreted programming language.",
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("05b213f2-0dca-4176-ac08-46d7911c80e7"),
                            Description = "Java is a widely used programming language.",
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("eef92d0f-a55b-4b3c-95e4-b3c1062da923"),
                            Description = "HTML is the standard markup language for creating web pages.",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = new Guid("03910ff2-9e18-4055-9789-8acfad96049d"),
                            Description = "CSS is used for styling web pages.",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = new Guid("a81827a3-fd6e-45a4-955f-e5ac84500eb7"),
                            Description = "SQL is used for managing relational databases.",
                            Name = "SQL"
                        },
                        new
                        {
                            Id = new Guid("02b866bb-e045-40d6-8a55-cd73cb83352a"),
                            Description = "React is a JavaScript library for building user interfaces.",
                            Name = "React"
                        },
                        new
                        {
                            Id = new Guid("82752f94-5a2d-4380-a3b4-729db947d311"),
                            Description = "Angular is a platform and framework for building single-page client applications using HTML and TypeScript.",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = new Guid("66590ca2-fa8b-4177-83b3-8525fe929333"),
                            Description = "Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a browser.",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = new Guid("c9dfb858-0ba4-42f1-bc2c-fb92ae0dfcab"),
                            Description = "Ruby is a dynamic, reflective, object-oriented, general-purpose programming language.",
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("d3cf5e2e-daee-4096-a098-f99b312e07ae"),
                            Description = "PHP is a general-purpose scripting language especially suited to web development.",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("0e249c4e-3313-4187-830d-d628fdafc0bd"),
                            Description = "Swift is a powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS.",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("4f5b7bec-55d1-42a3-a1c1-ea11672b18a7"),
                            Description = "Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.",
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("0f5ed10b-f770-4442-95cc-e251a2ed0672"),
                            Description = "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("5a72ded8-e483-42f4-94fa-e756478f7421"),
                            Description = "Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = new Guid("d7332295-fe10-46c1-a4f9-7a3ecba1f826"),
                            Description = "Kotlin is a statically typed programming language that runs on the Java Virtual Machine and can be compiled to JavaScript source code or use the LLVM compiler infrastructure.",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("aeaa4fb4-39ac-4883-98e2-41082f096d72"),
                            Description = "Scala is a general-purpose programming language providing support for functional programming and a strong static type system.",
                            Name = "Scala"
                        },
                        new
                        {
                            Id = new Guid("c04a6706-bf63-4c76-b376-2875c113c265"),
                            Description = "Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License.",
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = new Guid("7b776acb-f148-46ae-b81b-d90ddce25faf"),
                            Description = "Objective-C is a general-purpose, object-oriented programming language that adds Smalltalk-style messaging to the C programming language.",
                            Name = "Objective-C"
                        },
                        new
                        {
                            Id = new Guid("79025b14-8825-4e76-af41-31b09fd8a8b7"),
                            Description = "Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications.",
                            Name = "Vue.js"
                        },
                        new
                        {
                            Id = new Guid("f82b1e89-e23d-4508-aa7c-bbdacae9f2b4"),
                            Description = "ASP.NET is an open-source web framework for building modern web apps and services with .NET.",
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("b4271187-ac30-48d0-af6d-e1275b8b7b0b"),
                            Description = "Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design.",
                            Name = "Django"
                        });
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Reply", b =>
                {
                    b.HasOne("StackOverFlow.Domain.Entities.Answer", "Answer")
                        .WithMany("Replies")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("StackOverFlow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Answer", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("StackOverFlow.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
